/*
**
** Set up objects containing our bounds
*/
$feedback-types: (
  warning: (
    hue: (45, 55),
    sat: (70, 90),
    light: (90, 100)
  ),
  error: (
    hue: (340, 15),
    sat: (70, 90),
    light: (80, 100)
  ),
  success: (
    hue: (75, 155),
    sat: (60, 80),
    light: (70, 85)
  )
);


/*
**
** Function returning an end value that will always be
** higher than the start value, so that we can modulate
** on a linear range.
*/
@function absoluteEnd($start, $end) {
  @if $start > $end {
    @return $end + 360;
  } @else {
    @return $end;
  }
}

/*
**
** Function returning a value that will always be
** between 0 and 360 so that we can plot a point on
** the color wheel.
*/
@function degValue($val) {
  @if $val > 360 {
    @return $val - 360;
  } @else {
    @return $val;
  }
}

/*
**
** Function to create an endpoint larger than the start point if necessary
*/
@function absoluteEnd($start, $end) {
  @if $start > $end {
    @return $end + 360;
  } @else {
    @return $end;
  }
}

/*
**
** Function to figure out if our value falls
** between our bounds
*/
@function isBetween($val, $start, $end) {
  $absoluteEnd: absoluteEnd($start, $end);
  $absoluteVal: $val;

  @if $absoluteEnd > 360 and $val < $start {
    $absoluteVal: $val + 360;
  }

  @if $absoluteVal > $start and $absoluteVal < $absoluteEnd {
    @return true;
  } @else {
    @return false;
  }
}

/*
**
** Function that modifies color values to match base color
*/
@function theFunctionThatReturnsNicerValue($type, $value, $range) {
  @return $value;
}

/*
**
** Function that will be used by the developer
*/
@function alert-color($base-color, $feedback-type: 'warning') {
  
  // Check we have a valid $feedback-type or throw an error
  @if $feedback-type != 'error' and
      $feedback-type != 'success' and 
      $feedback-type != 'warning' {
    @error "Second argument must be 'error', 'warning', or 'success'";
  }

  // Store the color attributes of the passed in color
  $color-values: (
    hue: hue($base-color),
    sat: saturation($base-color),
    light: lightness($base-color)
  );
  
  // We'll merge in key/value pairs as we loop through hue/sat/light
  // and the values from $color-feedback is what we return at the end
  $color-feedback: ();

  @each $kind, $data in $feedback-types {
    @if $kind == $feedback-type {
      @each $type, $range in $data {
        
        $value: map-get($color-values, $type);
        $start: nth($range, 1);
        $end: nth($range, 2);

        // If the value falls within our desired range
        // we merge the existing value
        @if isBetween( $value, $start, $end ) {
          $color-feedback: map-merge($color-feedback, (
            $type: map-get($color-values, $type)
          ));

        // If it doesn't fall within our range we need
        // to modify the value before merging it
        } @else {
          $color-feedback: map-merge($color-feedback, (
            $type: theFunctionThatReturnsNicerValue($type, $value, $range)
          ));  
        }
        
      }  
    }
  }

  @return hsl(
    map-get($color-feedback, 'hue'),
    map-get($color-feedback, 'sat'),
    map-get($color-feedback, 'light')
  );

}
