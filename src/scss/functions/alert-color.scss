/*
**
** Set up map that contains our bounds
*/
$feedback-types: (
  warning: (
    hue: (45, 55),
    sat: (75, 100),
    light: (55, 60)
  ),
  error: (
    hue: (340, 15),
    sat: (65, 90),
    light: (50, 55)
  ),
  success: (
    hue: (75, 155),
    sat: (40, 65),
    light: (45, 50)
  )
);

/*
**
** Function returning a range with an end value that will always be
** higher than the start value, so that we can modulate on a linear range.
*/
@function absolute-range($range) {
  @if nth($range, 1) > nth($range, 2) {
    $start: nth($range, 1);
    $end: nth($range, 2) + 360;
    $new-range: ($start, $end);
    @return $new-range;
  } @else {
    @return $range;
  }
}

/*
**
** Function to figure out if our value falls between our bounds
*/
@function is-between($val, $start, $end) {
  @if $start < $end {
    @if $val > $start and $val < $end { @return true; }
    @else { @return false; }
  } @else {
    @if $val > $start or $val < $end { @return true; }
    @else { @return false; }
  }
}

/*
**
** Translate a number on a scale to its point between two values on a different scale
*/
@function modulate-value($val, $to-range, $type) {
  $from-range: (0, 100);
  @if $type == 'hue' { $from-range: (0, 360); }

  $from-low: nth($from-range, 1);
  $from-high: nth($from-range, 2);
  $to-low: nth($to-range, 1);
  $to-high: nth($to-range, 2);
  $result: $to-low + ((($val - $from-low) / ($from-high - $from-low)) * ($to-high - $to-low));

  @return $result;
}

/*
**
** Function that will be used by the developer
*/
@function alert-color($base-color, $feedback-type: 'warning') {

  // Check we have a valid $feedback-type or throw an error
  @if $feedback-type != 'error' and
      $feedback-type != 'success' and
      $feedback-type != 'warning' {
    @error "Second argument must be 'error', 'warning', or 'success'";
  }

  // Store the color attributes of the passed in color
  $color-values: (
    hue: hue($base-color),
    sat: saturation($base-color),
    light: lightness($base-color)
  );

  // We'll merge in key/value pairs as we loop through hue/sat/light
  // and the values from $color-feedback is what we return at the end
  $color-feedback: ();

  @each $kind, $data in $feedback-types {
    @if $kind == $feedback-type {
      @each $type, $range in $data {

        $value: map-get($color-values, $type);
        $start: nth($range, 1);
        $end: nth($range, 2);

        // If the value falls within our desired range
        // we merge the existing value
        @if is-between( $value, $start, $end ) {
          $color-feedback: map-merge($color-feedback, (
            $type: map-get($color-values, $type)
          ));

        // If it doesn't fall within our range we need
        // to modify the value before merging it
        } @else {
          $absolute-range: absolute-range($range);

          $color-feedback: map-merge($color-feedback, (
            $type: modulate-value($value, $absolute-range, $type)
          ));
        }

      }
    }
  }

  @return hsl(
    map-get($color-feedback, 'hue'),
    map-get($color-feedback, 'sat'),
    map-get($color-feedback, 'light')
  );

}
