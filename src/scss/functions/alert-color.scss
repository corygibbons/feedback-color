/*
**
**  Set up some objects containing our bounds
*/
$warning: (
  hue: (
    start: 45,
    end: 55
  ),
  sat: (
    start: 70,
    end: 90
  ),
  light: (
    start: 90,
    end: 100
  )
);

$error: (
  hue: (
    start: 340,
    end: 15
  ),
  sat: (
    start: 70,
    end: 90
  ),
  light: (
    start: 80,
    end: 100
  )
);

$success: (
  hue: (
    start: 75,
    end: 155
  ),
  sat: (
    start: 60,
    end: 80
  ),
  light: (
    start: 70,
    end: 85
  )
);

/*
**
** Function returning an end value that will always be
** higher than the start value, so that we can modulate
** on a linear range.
*/
@function absoluteEnd($start, $end) {
  @if $start > $end {
    @return $end + 360;
  } @else {
    @return $end;
  }
}

/*
**
** Function returning a value that will always be
** between 0 and 360 so that we can plot a point on
** the color wheel.
*/
@function degValue($val) {
  @if $val > 360 {
    @return $val - 360;
  } @else {
    @return $val;
  }
}

/*
**
**  Function to figure out if our value falls
**  between our bounds
*/
@function isBetween($val, $start, $end) {
  $absoluteEnd: absoluteEnd($start, $end);
  $absoluteVal: $val;

  @if $absoluteEnd > 360 and $val < $start {
    $absoluteVal: $val + 360;
  }

  @if $absoluteVal > $start and $absoluteVal < $absoluteEnd {
    @return true;
  } @else {
    @return false;
  }
}

/*
**
**  The main function that will be used by the developer
*/
@function alert-color($type, $brand-color) {

  $hue = hue($brand-color);
  $sat = saturation($brand-color);
  $light = lightness($brand-color);

  // Figure out what what type of alert we're dealing with

  // Should eventually be able to loop through this rather than manually
  // creating if statement, but this should suffice for now
  @if $type == 'warning' {
    @return yellow;
  } @elseif $type == 'error' {
    @return red;
  } @elseif $type == 'success' {
    @return green;
  }

}
